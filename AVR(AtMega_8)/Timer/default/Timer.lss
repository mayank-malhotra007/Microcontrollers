
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000024  00000000  00000000  000000f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000009a  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000063  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000dc  00000000  00000000  00000211  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000008c  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000018  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	16 d0       	rcall	.+44     	; 0x60 <main>
  34:	21 c0       	rjmp	.+66     	; 0x78 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <wait>:
#include<avr/io.h>
//#include<util/delay.h>
void wait()
{
  38:	80 e0       	ldi	r24, 0x00	; 0
  3a:	90 e0       	ldi	r25, 0x00	; 0
 for(i=0;i<3906;i++)
  {
    
 
 while((TIFR & (1<<TOV0))==0);  //polling for 3906 bits
 TIFR=(1<<TOV0);                //reset
  3c:	21 e0       	ldi	r18, 0x01	; 1
 int i;
 for(i=0;i<3906;i++)
  {
    
 
 while((TIFR & (1<<TOV0))==0);  //polling for 3906 bits
  3e:	08 b6       	in	r0, 0x38	; 56
  40:	00 fe       	sbrs	r0, 0
  42:	fd cf       	rjmp	.-6      	; 0x3e <__SP_H__>
 TIFR=(1<<TOV0);                //reset
  44:	28 bf       	out	0x38, r18	; 56
//#include<util/delay.h>
void wait()
{
    //time for 1sec(HEX CODE)
 int i;
 for(i=0;i<3906;i++)
  46:	01 96       	adiw	r24, 0x01	; 1
  48:	3f e0       	ldi	r19, 0x0F	; 15
  4a:	82 34       	cpi	r24, 0x42	; 66
  4c:	93 07       	cpc	r25, r19
  4e:	b9 f7       	brne	.-18     	; 0x3e <__SP_H__>
    
 
 while((TIFR & (1<<TOV0))==0);  //polling for 3906 bits
 TIFR=(1<<TOV0);                //reset
  }
 TCNT0=0xc0;
  50:	80 ec       	ldi	r24, 0xC0	; 192
  52:	82 bf       	out	0x32, r24	; 50
 while((TIFR & (1<<TOV0))==0);  // for for remaing 64 bits
  54:	08 b6       	in	r0, 0x38	; 56
  56:	00 fe       	sbrs	r0, 0
  58:	fd cf       	rjmp	.-6      	; 0x54 <__SREG__+0x15>
 TIFR=(1<<TOV0); 
  5a:	81 e0       	ldi	r24, 0x01	; 1
  5c:	88 bf       	out	0x38, r24	; 56
 
}
  5e:	08 95       	ret

00000060 <main>:
int main()
{
  60:	1f 93       	push	r17

 DDRD=0xff;
  62:	8f ef       	ldi	r24, 0xFF	; 255
  64:	81 bb       	out	0x11, r24	; 17
 TCCR0=1<<CS00;
  66:	81 e0       	ldi	r24, 0x01	; 1
  68:	83 bf       	out	0x33, r24	; 51
 TCNT0=0x00;  //empty the register
  6a:	12 be       	out	0x32, r1	; 50
 while(1)
   {
     PORTD=0xff;
  6c:	1f ef       	ldi	r17, 0xFF	; 255
  6e:	12 bb       	out	0x12, r17	; 18
	 wait();
  70:	e3 df       	rcall	.-58     	; 0x38 <wait>
	 PORTD=0x00;
  72:	12 ba       	out	0x12, r1	; 18
	 wait();
  74:	e1 df       	rcall	.-62     	; 0x38 <wait>
  76:	fb cf       	rjmp	.-10     	; 0x6e <main+0xe>

00000078 <_exit>:
  78:	f8 94       	cli

0000007a <__stop_program>:
  7a:	ff cf       	rjmp	.-2      	; 0x7a <__stop_program>
