
stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000172  00000000  00000000  0000015b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e4  00000000  00000000  000002cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000192  00000000  00000000  000003b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000544  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d4  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000a0  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	49 c0       	rjmp	.+146    	; 0xc8 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include<avr/io.h>
#include<util/delay.h>

void main()
{
  38:	cf 93       	push	r28
  3a:	df 93       	push	r29
 int i,j;
 DDRC=0xff;
  3c:	8f ef       	ldi	r24, 0xFF	; 255
  3e:	84 bb       	out	0x14, r24	; 20
  40:	40 e0       	ldi	r20, 0x00	; 0
  42:	50 e0       	ldi	r21, 0x00	; 0
 while(1)
   {
     for(i=0;i<50;i++)
	 { 
      PORTC=0x08>>j;
  44:	c8 e0       	ldi	r28, 0x08	; 8
  46:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  48:	69 e1       	ldi	r22, 0x19	; 25
  4a:	70 e0       	ldi	r23, 0x00	; 0
	 
	 }

	 for(i=0;i<50;i++)
	 { 
      PORTC=0x01<<j;
  4c:	a1 e0       	ldi	r26, 0x01	; 1
  4e:	b0 e0       	ldi	r27, 0x00	; 0
  50:	18 c0       	rjmp	.+48     	; 0x82 <__SREG__+0x43>
 DDRC=0xff;
 while(1)
   {
     for(i=0;i<50;i++)
	 { 
      PORTC=0x08>>j;
  52:	ce 01       	movw	r24, r28
  54:	02 2e       	mov	r0, r18
  56:	02 c0       	rjmp	.+4      	; 0x5c <__SREG__+0x1d>
  58:	95 95       	asr	r25
  5a:	87 95       	ror	r24
  5c:	0a 94       	dec	r0
  5e:	e2 f7       	brpl	.-8      	; 0x58 <__SREG__+0x19>
  60:	85 bb       	out	0x15, r24	; 21
  62:	88 e8       	ldi	r24, 0x88	; 136
  64:	93 e1       	ldi	r25, 0x13	; 19
  66:	fb 01       	movw	r30, r22
  68:	31 97       	sbiw	r30, 0x01	; 1
  6a:	f1 f7       	brne	.-4      	; 0x68 <__SREG__+0x29>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  6c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  6e:	d9 f7       	brne	.-10     	; 0x66 <__SREG__+0x27>
	  _delay_ms(500);
	  j++;
  70:	2f 5f       	subi	r18, 0xFF	; 255
  72:	3f 4f       	sbci	r19, 0xFF	; 255

	  if(j==4)
  74:	24 30       	cpi	r18, 0x04	; 4
  76:	31 05       	cpc	r19, r1
  78:	11 f4       	brne	.+4      	; 0x7e <__SREG__+0x3f>
  7a:	20 e0       	ldi	r18, 0x00	; 0
  7c:	30 e0       	ldi	r19, 0x00	; 0
{
 int i,j;
 DDRC=0xff;
 while(1)
   {
     for(i=0;i<50;i++)
  7e:	4f 5f       	subi	r20, 0xFF	; 255
  80:	5f 4f       	sbci	r21, 0xFF	; 255
  82:	42 33       	cpi	r20, 0x32	; 50
  84:	51 05       	cpc	r21, r1
  86:	2c f3       	brlt	.-54     	; 0x52 <__SREG__+0x13>
  88:	40 e0       	ldi	r20, 0x00	; 0
  8a:	50 e0       	ldi	r21, 0x00	; 0
	 
	 }

	 for(i=0;i<50;i++)
	 { 
      PORTC=0x01<<j;
  8c:	cd 01       	movw	r24, r26
  8e:	02 2e       	mov	r0, r18
  90:	02 c0       	rjmp	.+4      	; 0x96 <__SREG__+0x57>
  92:	88 0f       	add	r24, r24
  94:	99 1f       	adc	r25, r25
  96:	0a 94       	dec	r0
  98:	e2 f7       	brpl	.-8      	; 0x92 <__SREG__+0x53>
  9a:	85 bb       	out	0x15, r24	; 21
  9c:	88 e8       	ldi	r24, 0x88	; 136
  9e:	93 e1       	ldi	r25, 0x13	; 19
  a0:	fb 01       	movw	r30, r22
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <__SREG__+0x63>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__SREG__+0x61>
	  _delay_ms(500);
	  j++;
  aa:	2f 5f       	subi	r18, 0xFF	; 255
  ac:	3f 4f       	sbci	r19, 0xFF	; 255

	  if(j==4)
  ae:	24 30       	cpi	r18, 0x04	; 4
  b0:	31 05       	cpc	r19, r1
  b2:	11 f4       	brne	.+4      	; 0xb8 <__SREG__+0x79>
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
	     j=0;
	   }
	 
	 }

	 for(i=0;i<50;i++)
  b8:	4f 5f       	subi	r20, 0xFF	; 255
  ba:	5f 4f       	sbci	r21, 0xFF	; 255
  bc:	42 33       	cpi	r20, 0x32	; 50
  be:	51 05       	cpc	r21, r1
  c0:	29 f7       	brne	.-54     	; 0x8c <__SREG__+0x4d>
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	dd cf       	rjmp	.-70     	; 0x82 <__SREG__+0x43>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
