
new_7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000008a  000000fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000023  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000145  00000000  00000000  00000151  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000ed  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000012d  00000000  00000000  00000383  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000d4  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000050  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e8       	ldi	r30, 0x8A	; 138
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 37       	cpi	r26, 0x70	; 112
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	1d c0       	rjmp	.+58     	; 0x86 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:
int main()
{
 int i;
//char arr[10]={'0x3f','0x06','0x5b','0x4f','0x66','0x6d','0x7d','0x07','0x67'};
 
  DDRD=0xff;
  4e:	8f ef       	ldi	r24, 0xFF	; 255
  50:	81 bb       	out	0x11, r24	; 17
  52:	20 e0       	ldi	r18, 0x00	; 0
  54:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  56:	49 e1       	ldi	r20, 0x19	; 25
  58:	50 e0       	ldi	r21, 0x00	; 0

 while(1)
{
 for (i=0;i<8;i++)
   {
     PORTD=arr[i];
  5a:	f9 01       	movw	r30, r18
  5c:	ee 0f       	add	r30, r30
  5e:	ff 1f       	adc	r31, r31
  60:	e0 5a       	subi	r30, 0xA0	; 160
  62:	ff 4f       	sbci	r31, 0xFF	; 255
  64:	80 81       	ld	r24, Z
  66:	82 bb       	out	0x12, r24	; 18
  68:	88 e8       	ldi	r24, 0x88	; 136
  6a:	93 e1       	ldi	r25, 0x13	; 19
  6c:	fa 01       	movw	r30, r20
  6e:	31 97       	sbiw	r30, 0x01	; 1
  70:	f1 f7       	brne	.-4      	; 0x6e <main+0x20>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  72:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  74:	d9 f7       	brne	.-10     	; 0x6c <main+0x1e>
 
  DDRD=0xff;

 while(1)
{
 for (i=0;i<8;i++)
  76:	2f 5f       	subi	r18, 0xFF	; 255
  78:	3f 4f       	sbci	r19, 0xFF	; 255
  7a:	28 30       	cpi	r18, 0x08	; 8
  7c:	31 05       	cpc	r19, r1
  7e:	6c f3       	brlt	.-38     	; 0x5a <main+0xc>
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	ea cf       	rjmp	.-44     	; 0x5a <main+0xc>

00000086 <_exit>:
  86:	f8 94       	cli

00000088 <__stop_program>:
  88:	ff cf       	rjmp	.-2      	; 0x88 <__stop_program>
