
16bit_Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000024  00000000  00000000  000000f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000009a  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000063  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000e2  00000000  00000000  00000211  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000098  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000018  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	17 d0       	rcall	.+46     	; 0x62 <main>
  34:	21 c0       	rjmp	.+66     	; 0x78 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <wait>:
#include<avr/io.h>

void wait()
{
  38:	81 e0       	ldi	r24, 0x01	; 1
  3a:	90 e0       	ldi	r25, 0x00	; 0
 int i;
 for(i=1;i<=15;i++)
   {
     while((TIFR & (1<<TOV1))==0);
	 TIFR=(1<<TOV1);
  3c:	24 e0       	ldi	r18, 0x04	; 4
void wait()
{
 int i;
 for(i=1;i<=15;i++)
   {
     while((TIFR & (1<<TOV1))==0);
  3e:	08 b6       	in	r0, 0x38	; 56
  40:	02 fe       	sbrs	r0, 2
  42:	fd cf       	rjmp	.-6      	; 0x3e <__SP_H__>
	 TIFR=(1<<TOV1);
  44:	28 bf       	out	0x38, r18	; 56
#include<avr/io.h>

void wait()
{
 int i;
 for(i=1;i<=15;i++)
  46:	01 96       	adiw	r24, 0x01	; 1
  48:	80 31       	cpi	r24, 0x10	; 16
  4a:	91 05       	cpc	r25, r1
  4c:	c1 f7       	brne	.-16     	; 0x3e <__SP_H__>
     while((TIFR & (1<<TOV1))==0);
	 TIFR=(1<<TOV1);

   }

 TCNT1H=0xBD;
  4e:	8d eb       	ldi	r24, 0xBD	; 189
  50:	8d bd       	out	0x2d, r24	; 45
 TCNT1L=0xC0;
  52:	80 ec       	ldi	r24, 0xC0	; 192
  54:	8c bd       	out	0x2c, r24	; 44
 
 while((TIFR & (1<<TOV1))==0);
  56:	08 b6       	in	r0, 0x38	; 56
  58:	02 fe       	sbrs	r0, 2
  5a:	fd cf       	rjmp	.-6      	; 0x56 <__SREG__+0x17>
 TIFR=(1<<TOV1);
  5c:	84 e0       	ldi	r24, 0x04	; 4
  5e:	88 bf       	out	0x38, r24	; 56


}
  60:	08 95       	ret

00000062 <main>:

int main()
{
  62:	1f 93       	push	r17
 DDRD=0xff;
  64:	8f ef       	ldi	r24, 0xFF	; 255
  66:	81 bb       	out	0x11, r24	; 17
 TCCR1B=1<<CS10;   //page 100
  68:	81 e0       	ldi	r24, 0x01	; 1
  6a:	8e bd       	out	0x2e, r24	; 46
 while(1)
   {
     PORTD=0xff;
  6c:	1f ef       	ldi	r17, 0xFF	; 255
  6e:	12 bb       	out	0x12, r17	; 18
	 wait();
  70:	e3 df       	rcall	.-58     	; 0x38 <wait>
	 PORTD=0x00;
  72:	12 ba       	out	0x12, r1	; 18
     wait();
  74:	e1 df       	rcall	.-62     	; 0x38 <wait>
  76:	fb cf       	rjmp	.-10     	; 0x6e <main+0xc>

00000078 <_exit>:
  78:	f8 94       	cli

0000007a <__stop_program>:
  7a:	ff cf       	rjmp	.-2      	; 0x7a <__stop_program>
