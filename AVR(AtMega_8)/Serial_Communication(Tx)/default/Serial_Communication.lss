
Serial_Communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000098  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000098  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000026  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000170  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f5  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000018e  00000000  00000000  000003bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  00000550  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f3  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000028  00000000  00000000  00000673  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  0000069b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e9       	ldi	r30, 0x98	; 152
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a8 36       	cpi	r26, 0x68	; 104
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	13 d0       	rcall	.+38     	; 0x70 <main>
  4a:	24 c0       	rjmp	.+72     	; 0x94 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <string>:
#include<avr/io.h>
#include<util/delay.h>

void string(unsigned char *p)
{
  4e:	dc 01       	movw	r26, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  50:	49 e1       	ldi	r20, 0x19	; 25
  52:	50 e0       	ldi	r21, 0x00	; 0
  54:	09 c0       	rjmp	.+18     	; 0x68 <string+0x1a>
while(*p!='\0')
  56:	80 e7       	ldi	r24, 0x70	; 112
  58:	97 e1       	ldi	r25, 0x17	; 23
  5a:	fa 01       	movw	r30, r20
  5c:	31 97       	sbiw	r30, 0x01	; 1
  5e:	f1 f7       	brne	.-4      	; 0x5c <string+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  60:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  62:	d9 f7       	brne	.-10     	; 0x5a <string+0xc>
{
_delay_ms(600);
UDR=*p;
  64:	2c b9       	out	0x0c, r18	; 12
p++;
  66:	11 96       	adiw	r26, 0x01	; 1
#include<avr/io.h>
#include<util/delay.h>

void string(unsigned char *p)
{
while(*p!='\0')
  68:	2c 91       	ld	r18, X
  6a:	22 23       	and	r18, r18
  6c:	a1 f7       	brne	.-24     	; 0x56 <string+0x8>
{
_delay_ms(600);
UDR=*p;
p++;
}
}
  6e:	08 95       	ret

00000070 <main>:

void main()
{

UBRRL=51;
  70:	83 e3       	ldi	r24, 0x33	; 51
  72:	89 b9       	out	0x09, r24	; 9
UCSRB=(1<<TXEN);
  74:	88 e0       	ldi	r24, 0x08	; 8
  76:	8a b9       	out	0x0a, r24	; 10
UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  78:	86 e8       	ldi	r24, 0x86	; 134
  7a:	80 bd       	out	0x20, r24	; 32

while(1)
{
string("Mayank");
  7c:	80 e6       	ldi	r24, 0x60	; 96
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	e6 df       	rcall	.-52     	; 0x4e <string>
while((UCSRA & (1<<TXC))==0);
  82:	5e 9b       	sbis	0x0b, 6	; 11
  84:	fe cf       	rjmp	.-4      	; 0x82 <main+0x12>
UCSRA=(1<<TXC);
  86:	80 e4       	ldi	r24, 0x40	; 64
  88:	8b b9       	out	0x0b, r24	; 11
  8a:	84 ed       	ldi	r24, 0xD4	; 212
  8c:	90 e3       	ldi	r25, 0x30	; 48
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <main+0x1e>
  92:	ff cf       	rjmp	.-2      	; 0x92 <main+0x22>

00000094 <_exit>:
  94:	f8 94       	cli

00000096 <__stop_program>:
  96:	ff cf       	rjmp	.-2      	; 0x96 <__stop_program>
