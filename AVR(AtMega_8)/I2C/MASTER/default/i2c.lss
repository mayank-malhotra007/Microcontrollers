
i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000e8  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001ea  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000014f  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001f8  00000000  00000000  000004ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000006e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000db  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000070  00000000  00000000  00000803  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000873  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 ee       	ldi	r30, 0xE8	; 232
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	1d d0       	rcall	.+58     	; 0x84 <main>
  4a:	4c c0       	rjmp	.+152    	; 0xe4 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <error>:
#include<avr/io.h>
#include<util/delay.h>

void error(unsigned char a)
{
PORTD=a;
  4e:	82 bb       	out	0x12, r24	; 18
  50:	ff cf       	rjmp	.-2      	; 0x50 <error+0x2>

00000052 <string>:
while(1);
}


void string(unsigned char *p)
{
  52:	fc 01       	movw	r30, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  54:	48 ea       	ldi	r20, 0xA8	; 168
  56:	51 e6       	ldi	r21, 0x61	; 97
while(*p!='\0')
{
_delay_ms(100);
TWDR=*p;
TWCR=(1<<TWINT)|(1<<TWEN);
  58:	34 e8       	ldi	r19, 0x84	; 132
  5a:	10 c0       	rjmp	.+32     	; 0x7c <string+0x2a>
  5c:	ca 01       	movw	r24, r20
  5e:	01 97       	sbiw	r24, 0x01	; 1
  60:	f1 f7       	brne	.-4      	; 0x5e <string+0xc>
void string(unsigned char *p)
{
while(*p!='\0')
{
_delay_ms(100);
TWDR=*p;
  62:	23 b9       	out	0x03, r18	; 3
TWCR=(1<<TWINT)|(1<<TWEN);
  64:	36 bf       	out	0x36, r19	; 54
while((TWCR&(1<<TWINT))==0);
  66:	06 b6       	in	r0, 0x36	; 54
  68:	07 fe       	sbrs	r0, 7
  6a:	fd cf       	rjmp	.-6      	; 0x66 <string+0x14>
p++;
if((TWSR & 0XF8)!=0X28)
  6c:	81 b1       	in	r24, 0x01	; 1
  6e:	88 7f       	andi	r24, 0xF8	; 248
  70:	88 32       	cpi	r24, 0x28	; 40
  72:	19 f0       	breq	.+6      	; 0x7a <string+0x28>
#include<avr/io.h>
#include<util/delay.h>

void error(unsigned char a)
{
PORTD=a;
  74:	83 e0       	ldi	r24, 0x03	; 3
  76:	82 bb       	out	0x12, r24	; 18
  78:	ff cf       	rjmp	.-2      	; 0x78 <string+0x26>
{
_delay_ms(100);
TWDR=*p;
TWCR=(1<<TWINT)|(1<<TWEN);
while((TWCR&(1<<TWINT))==0);
p++;
  7a:	31 96       	adiw	r30, 0x01	; 1
}


void string(unsigned char *p)
{
while(*p!='\0')
  7c:	20 81       	ld	r18, Z
  7e:	22 23       	and	r18, r18
  80:	69 f7       	brne	.-38     	; 0x5c <string+0xa>
while((TWCR&(1<<TWINT))==0);
p++;
if((TWSR & 0XF8)!=0X28)
error(3);
}
}
  82:	08 95       	ret

00000084 <main>:

int main()
{
DDRD=0XFF;
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	81 bb       	out	0x11, r24	; 17
  88:	80 e1       	ldi	r24, 0x10	; 16
  8a:	97 e2       	ldi	r25, 0x27	; 39
  8c:	29 e1       	ldi	r18, 0x19	; 25
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	f9 01       	movw	r30, r18
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <main+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  96:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  98:	d9 f7       	brne	.-10     	; 0x90 <main+0xc>

_delay_ms(1000);

TWBR=255;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	80 b9       	out	0x00, r24	; 0
TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  9e:	84 ea       	ldi	r24, 0xA4	; 164
  a0:	86 bf       	out	0x36, r24	; 54
while((TWCR&(1<<TWINT))==0);
  a2:	06 b6       	in	r0, 0x36	; 54
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <main+0x1e>
if((TWSR & 0XF8)!=0X08)
  a8:	81 b1       	in	r24, 0x01	; 1
  aa:	88 7f       	andi	r24, 0xF8	; 248
  ac:	88 30       	cpi	r24, 0x08	; 8
  ae:	19 f0       	breq	.+6      	; 0xb6 <main+0x32>
#include<avr/io.h>
#include<util/delay.h>

void error(unsigned char a)
{
PORTD=a;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	82 bb       	out	0x12, r24	; 18
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <main+0x30>
if((TWSR & 0XF8)!=0X08)
{
error(1);
}

TWDR=0X50;
  b6:	80 e5       	ldi	r24, 0x50	; 80
  b8:	83 b9       	out	0x03, r24	; 3
TWCR=(1<<TWINT)|(1<<TWEN);
  ba:	84 e8       	ldi	r24, 0x84	; 132
  bc:	86 bf       	out	0x36, r24	; 54
while((TWCR&(1<<TWINT))==0);
  be:	06 b6       	in	r0, 0x36	; 54
  c0:	07 fe       	sbrs	r0, 7
  c2:	fd cf       	rjmp	.-6      	; 0xbe <main+0x3a>
if((TWSR & 0XF8)!=0X18)
  c4:	81 b1       	in	r24, 0x01	; 1
  c6:	88 7f       	andi	r24, 0xF8	; 248
  c8:	88 31       	cpi	r24, 0x18	; 24
  ca:	19 f0       	breq	.+6      	; 0xd2 <main+0x4e>
#include<avr/io.h>
#include<util/delay.h>

void error(unsigned char a)
{
PORTD=a;
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	82 bb       	out	0x12, r24	; 18
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <main+0x4c>
if((TWSR & 0XF8)!=0X18)
{
error(2);
}

string("RAJNEESH");
  d2:	80 e6       	ldi	r24, 0x60	; 96
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	bd df       	rcall	.-134    	; 0x52 <string>

TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
  d8:	84 e9       	ldi	r24, 0x94	; 148
  da:	86 bf       	out	0x36, r24	; 54
while((TWCR&(1<<TWSTO)));
  dc:	06 b6       	in	r0, 0x36	; 54
  de:	04 fc       	sbrc	r0, 4
  e0:	fd cf       	rjmp	.-6      	; 0xdc <main+0x58>
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <main+0x5e>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
