
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001b2  00000000  00000000  00000131  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d7  00000000  00000000  000002e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001a4  00000000  00000000  000003ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000560  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e2  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000060  00000000  00000000  00000662  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	34 c0       	rjmp	.+104    	; 0x9e <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include<util/delay.h>

int main()
 {

   DDRB=0xFF;
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	87 bb       	out	0x17, r24	; 23
   DDRC=0XFF;
  3c:	84 bb       	out	0x14, r24	; 20
   SPCR = ( (1<<SPE) | (1<<MSTR)   );
  3e:	80 e5       	ldi	r24, 0x50	; 80
  40:	8d b9       	out	0x0d, r24	; 13
   
   while(1)
    {
	 PORTC=0x0E;
  42:	8e e0       	ldi	r24, 0x0E	; 14
  44:	85 bb       	out	0x15, r24	; 21
	 SPDR='A';
  46:	81 e4       	ldi	r24, 0x41	; 65
  48:	8f b9       	out	0x0f, r24	; 15
	 while( (SPSR&(1<<SPIF))==0 );   //poll;
  4a:	77 9b       	sbis	0x0e, 7	; 14
  4c:	fe cf       	rjmp	.-4      	; 0x4a <__SREG__+0xb>
  4e:	88 e8       	ldi	r24, 0x88	; 136
  50:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  52:	29 e1       	ldi	r18, 0x19	; 25
  54:	30 e0       	ldi	r19, 0x00	; 0
  56:	f9 01       	movw	r30, r18
  58:	31 97       	sbiw	r30, 0x01	; 1
  5a:	f1 f7       	brne	.-4      	; 0x58 <__SREG__+0x19>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  5c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  5e:	d9 f7       	brne	.-10     	; 0x56 <__SREG__+0x17>
     _delay_ms(500);

	 PORTC=0x0D;
  60:	8d e0       	ldi	r24, 0x0D	; 13
  62:	85 bb       	out	0x15, r24	; 21
	 SPDR='B';
  64:	82 e4       	ldi	r24, 0x42	; 66
  66:	8f b9       	out	0x0f, r24	; 15
     while( (SPSR&(1<<SPIF))==0 );
  68:	77 9b       	sbis	0x0e, 7	; 14
  6a:	fe cf       	rjmp	.-4      	; 0x68 <__SREG__+0x29>
  6c:	88 e8       	ldi	r24, 0x88	; 136
  6e:	93 e1       	ldi	r25, 0x13	; 19
  70:	29 e1       	ldi	r18, 0x19	; 25
  72:	30 e0       	ldi	r19, 0x00	; 0
  74:	f9 01       	movw	r30, r18
  76:	31 97       	sbiw	r30, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <__SREG__+0x37>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  7a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  7c:	d9 f7       	brne	.-10     	; 0x74 <__SREG__+0x35>
     _delay_ms(500);

	 PORTC=0x0B;
  7e:	8b e0       	ldi	r24, 0x0B	; 11
  80:	85 bb       	out	0x15, r24	; 21
	 SPDR='C';
  82:	83 e4       	ldi	r24, 0x43	; 67
  84:	8f b9       	out	0x0f, r24	; 15
	 while( (SPSR&(1<<SPIF))==0 );
  86:	77 9b       	sbis	0x0e, 7	; 14
  88:	fe cf       	rjmp	.-4      	; 0x86 <__SREG__+0x47>
  8a:	88 e8       	ldi	r24, 0x88	; 136
  8c:	93 e1       	ldi	r25, 0x13	; 19
  8e:	29 e1       	ldi	r18, 0x19	; 25
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	f9 01       	movw	r30, r18
  94:	31 97       	sbiw	r30, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <__SREG__+0x55>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  98:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  9a:	d9 f7       	brne	.-10     	; 0x92 <__SREG__+0x53>
  9c:	ff cf       	rjmp	.-2      	; 0x9c <__SREG__+0x5d>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
