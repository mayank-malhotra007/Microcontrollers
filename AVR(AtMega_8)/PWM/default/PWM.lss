
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000011a  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000001b  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000125  00000000  00000000  00000155  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000ce  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001ad  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  000004f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000c6  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000005de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	2e c0       	rjmp	.+92     	; 0xa2 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#include<avr/io.h>
#include<util/delay.h>
// only PIN 15 and 16 give PWM

int main()
{ static int t=0;
  48:	1f 93       	push	r17
DDRC=0x00;
  4a:	14 ba       	out	0x14, r1	; 20
DDRB=0XFF;
  4c:	8f ef       	ldi	r24, 0xFF	; 255
  4e:	87 bb       	out	0x17, r24	; 23
DDRD=0xFF;
  50:	81 bb       	out	0x11, r24	; 17
  52:	20 91 60 00 	lds	r18, 0x0060
  56:	30 91 61 00 	lds	r19, 0x0061

while(1)
 {

 TCCR1A = ((1<<COM1A1) | (1<<COM1B1) | (1<<WGM11)  );    // mode 14
  5a:	12 ea       	ldi	r17, 0xA2	; 162
 TCCR1B = ( (1<<WGM12) | (1<<WGM13) | (1<<CS10) );                // for pwm and NO PRESCALING
  5c:	b9 e1       	ldi	r27, 0x19	; 25
 TCNT1=0x00;
 ICR1=15000;  //time taken
  5e:	68 e9       	ldi	r22, 0x98	; 152
  60:	7a e3       	ldi	r23, 0x3A	; 58
  OCR1A=0x00;

 while (PINC&(1<<PINC0)==1)
	   {

     	     PORTD=0x01;   // to check button,led fixed
  62:	a1 e0       	ldi	r26, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  64:	49 e1       	ldi	r20, 0x19	; 25
  66:	50 e0       	ldi	r21, 0x00	; 0
DDRD=0xFF;

while(1)
 {

 TCCR1A = ((1<<COM1A1) | (1<<COM1B1) | (1<<WGM11)  );    // mode 14
  68:	1f bd       	out	0x2f, r17	; 47
 TCCR1B = ( (1<<WGM12) | (1<<WGM13) | (1<<CS10) );                // for pwm and NO PRESCALING
  6a:	be bd       	out	0x2e, r27	; 46
 TCNT1=0x00;
  6c:	1d bc       	out	0x2d, r1	; 45
  6e:	1c bc       	out	0x2c, r1	; 44
 ICR1=15000;  //time taken
  70:	77 bd       	out	0x27, r23	; 39
  72:	66 bd       	out	0x26, r22	; 38
  OCR1A=0x00;
  74:	1b bc       	out	0x2b, r1	; 43
  76:	1a bc       	out	0x2a, r1	; 42
  78:	0c c0       	rjmp	.+24     	; 0x92 <main+0x4a>

 while (PINC&(1<<PINC0)==1)
	   {

     	     PORTD=0x01;   // to check button,led fixed
  7a:	a2 bb       	out	0x12, r26	; 18
#include<avr/io.h>
#include<util/delay.h>
// only PIN 15 and 16 give PWM

int main()
{ static int t=0;
  7c:	2a 5b       	subi	r18, 0xBA	; 186
  7e:	3f 4f       	sbci	r19, 0xFF	; 255
 while (PINC&(1<<PINC0)==1)
	   {

     	     PORTD=0x01;   // to check button,led fixed
             t+=70;
			 OCR1A=t;
  80:	3b bd       	out	0x2b, r19	; 43
  82:	2a bd       	out	0x2a, r18	; 42
  84:	88 e8       	ldi	r24, 0x88	; 136
  86:	93 e1       	ldi	r25, 0x13	; 19
  88:	fa 01       	movw	r30, r20
  8a:	31 97       	sbiw	r30, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <main+0x42>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  8e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  90:	d9 f7       	brne	.-10     	; 0x88 <main+0x40>
 TCCR1B = ( (1<<WGM12) | (1<<WGM13) | (1<<CS10) );                // for pwm and NO PRESCALING
 TCNT1=0x00;
 ICR1=15000;  //time taken
  OCR1A=0x00;

 while (PINC&(1<<PINC0)==1)
  92:	98 99       	sbic	0x13, 0	; 19
  94:	f2 cf       	rjmp	.-28     	; 0x7a <main+0x32>
	     
           
		 
          }
 
 PORTD=0x00;
  96:	12 ba       	out	0x12, r1	; 18
 t-=70;
  98:	26 54       	subi	r18, 0x46	; 70
  9a:	30 40       	sbci	r19, 0x00	; 0
 OCR1A=t;
  9c:	3b bd       	out	0x2b, r19	; 43
  9e:	2a bd       	out	0x2a, r18	; 42
  a0:	e3 cf       	rjmp	.-58     	; 0x68 <main+0x20>

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
