
Slave2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000001a2  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000049  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000381  00000000  00000000  0000020b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000130  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000288  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000944  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ec  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000de  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	5b d0       	rcall	.+182    	; 0xfa <main>
  44:	72 c0       	rjmp	.+228    	; 0x12a <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <cmd>:

void cmd(unsigned char c)
{
unsigned int l,h;
l=c &0X0F;
h=c>>4;
  48:	38 2f       	mov	r19, r24
  4a:	32 95       	swap	r19
  4c:	3f 70       	andi	r19, 0x0F	; 15


PORTD=h|0X40;
  4e:	23 2f       	mov	r18, r19
  50:	20 64       	ori	r18, 0x40	; 64
  52:	22 bb       	out	0x12, r18	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  54:	48 e8       	ldi	r20, 0x88	; 136
  56:	53 e1       	ldi	r21, 0x13	; 19
  58:	fa 01       	movw	r30, r20
  5a:	31 97       	sbiw	r30, 0x01	; 1
  5c:	f1 f7       	brne	.-4      	; 0x5a <cmd+0x12>
_delay_ms(20);
PORTD=h|0X00;
  5e:	32 bb       	out	0x12, r19	; 18

PORTD=l|0X40;
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	8f 70       	andi	r24, 0x0F	; 15
  64:	90 70       	andi	r25, 0x00	; 0
  66:	28 2f       	mov	r18, r24
  68:	20 64       	ori	r18, 0x40	; 64
  6a:	22 bb       	out	0x12, r18	; 18
  6c:	fa 01       	movw	r30, r20
  6e:	31 97       	sbiw	r30, 0x01	; 1
  70:	f1 f7       	brne	.-4      	; 0x6e <cmd+0x26>
_delay_ms(20);
PORTD=l|0X00;
  72:	82 bb       	out	0x12, r24	; 18
}
  74:	08 95       	ret

00000076 <dat>:

void dat (unsigned char c)
{
unsigned int l,h;
l=c &0X0F;
h=c>>4;
  76:	28 2f       	mov	r18, r24
  78:	22 95       	swap	r18
  7a:	2f 70       	andi	r18, 0x0F	; 15

PORTD=h|0X50;	
  7c:	92 2f       	mov	r25, r18
  7e:	90 65       	ori	r25, 0x50	; 80
  80:	92 bb       	out	0x12, r25	; 18
  82:	48 e8       	ldi	r20, 0x88	; 136
  84:	53 e1       	ldi	r21, 0x13	; 19
  86:	fa 01       	movw	r30, r20
  88:	31 97       	sbiw	r30, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <dat+0x12>
_delay_ms(20);				
PORTD=h|0X10;
  8c:	20 61       	ori	r18, 0x10	; 16
  8e:	22 bb       	out	0x12, r18	; 18

PORTD=l|0X50;
  90:	8f 70       	andi	r24, 0x0F	; 15
  92:	98 2f       	mov	r25, r24
  94:	90 65       	ori	r25, 0x50	; 80
  96:	92 bb       	out	0x12, r25	; 18
  98:	fa 01       	movw	r30, r20
  9a:	31 97       	sbiw	r30, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <dat+0x24>
_delay_ms(20);
PORTD=l|0X10;
  9e:	80 61       	ori	r24, 0x10	; 16
  a0:	82 bb       	out	0x12, r24	; 18
}
  a2:	08 95       	ret

000000a4 <lcd_init>:


void lcd_init()
{
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
cmd(0x02);
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	ce df       	rcall	.-100    	; 0x48 <cmd>
  ac:	04 ec       	ldi	r16, 0xC4	; 196
  ae:	19 e0       	ldi	r17, 0x09	; 9
  b0:	c8 01       	movw	r24, r16
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <lcd_init+0xe>
_delay_ms(10);
cmd(0x28);
  b6:	88 e2       	ldi	r24, 0x28	; 40
  b8:	c7 df       	rcall	.-114    	; 0x48 <cmd>
  ba:	c8 01       	movw	r24, r16
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_init+0x18>
_delay_ms(10);
cmd(0x01);
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	c2 df       	rcall	.-124    	; 0x48 <cmd>
  c4:	c8 01       	movw	r24, r16
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <lcd_init+0x22>
_delay_ms(10);
cmd(0x80);
  ca:	80 e8       	ldi	r24, 0x80	; 128
  cc:	bd df       	rcall	.-134    	; 0x48 <cmd>
  ce:	c8 01       	movw	r24, r16
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_init+0x2c>
_delay_ms(10);
cmd(0x0e);
  d4:	8e e0       	ldi	r24, 0x0E	; 14
  d6:	b8 df       	rcall	.-144    	; 0x48 <cmd>
  d8:	c8 01       	movw	r24, r16
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <lcd_init+0x36>
_delay_ms(10);
}
  de:	1f 91       	pop	r17
  e0:	0f 91       	pop	r16
  e2:	08 95       	ret

000000e4 <string>:


void string(unsigned char *p)
{
  e4:	fc 01       	movw	r30, r24
  e6:	05 c0       	rjmp	.+10     	; 0xf2 <string+0xe>
while(*p!='\0')
{
TWDR=*p;
  e8:	83 b9       	out	0x03, r24	; 3
while((TWCR&(1<<TWINT))==0);
  ea:	06 b6       	in	r0, 0x36	; 54
  ec:	07 fe       	sbrs	r0, 7
  ee:	fd cf       	rjmp	.-6      	; 0xea <string+0x6>
p++;
  f0:	31 96       	adiw	r30, 0x01	; 1
}


void string(unsigned char *p)
{
while(*p!='\0')
  f2:	80 81       	ld	r24, Z
  f4:	88 23       	and	r24, r24
  f6:	c1 f7       	brne	.-16     	; 0xe8 <string+0x4>
TWDR=*p;
while((TWCR&(1<<TWINT))==0);
p++;

}
}
  f8:	08 95       	ret

000000fa <main>:



int main()
{
  fa:	1f 93       	push	r17
DDRD=0XFF;
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	81 bb       	out	0x11, r24	; 17
TWAR=0X60;        // slave2 address
 100:	80 e6       	ldi	r24, 0x60	; 96
 102:	82 b9       	out	0x02, r24	; 2
lcd_init();
 104:	cf df       	rcall	.-98     	; 0xa4 <lcd_init>

while(1)
{

TWCR=(1<<TWINT)|(1<<TWEA)|(1<<TWEN);
 106:	14 ec       	ldi	r17, 0xC4	; 196
 108:	16 bf       	out	0x36, r17	; 54
while((TWCR&(1<<TWINT))==0);
 10a:	06 b6       	in	r0, 0x36	; 54
 10c:	07 fe       	sbrs	r0, 7
 10e:	fd cf       	rjmp	.-6      	; 0x10a <main+0x10>


TWCR|=1<<TWINT;
 110:	86 b7       	in	r24, 0x36	; 54
 112:	80 68       	ori	r24, 0x80	; 128
 114:	86 bf       	out	0x36, r24	; 54
while((TWCR&(1<<TWINT))==0);
 116:	06 b6       	in	r0, 0x36	; 54
 118:	07 fe       	sbrs	r0, 7
 11a:	fd cf       	rjmp	.-6      	; 0x116 <main+0x1c>
x=TWDR;
 11c:	83 b1       	in	r24, 0x03	; 3
 11e:	80 93 60 00 	sts	0x0060, r24
 122:	10 92 61 00 	sts	0x0061, r1
dat(x);
 126:	a7 df       	rcall	.-178    	; 0x76 <dat>
 128:	ef cf       	rjmp	.-34     	; 0x108 <main+0xe>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
